# Generated by Django 5.0.4 on 2024-05-22 16:22

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ActionItem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=1000)),
                ('priority', models.CharField(blank=True, max_length=100, null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('created_date', models.DateTimeField()),
                ('status', models.CharField(max_length=100)),
                ('sustainable_action_item', models.IntegerField()),
            ],
            options={
                'db_table': 'action_item',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActionItemComment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'action_item_comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('announcement_text', models.TextField()),
            ],
            options={
                'db_table': 'announcement',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('decision_text', models.TextField()),
            ],
            options={
                'db_table': 'decision',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 'department',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dependency',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('dependency_text', models.TextField()),
            ],
            options={
                'db_table': 'dependency',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatClockedschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clocked_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_celery_beat_clockedschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatCrontabschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.CharField(max_length=240)),
                ('hour', models.CharField(max_length=96)),
                ('day_of_week', models.CharField(max_length=64)),
                ('day_of_month', models.CharField(max_length=124)),
                ('month_of_year', models.CharField(max_length=64)),
                ('timezone', models.CharField(max_length=63)),
            ],
            options={
                'db_table': 'django_celery_beat_crontabschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatIntervalschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('every', models.IntegerField()),
                ('period', models.CharField(max_length=24)),
            ],
            options={
                'db_table': 'django_celery_beat_intervalschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('task', models.CharField(max_length=200)),
                ('args', models.TextField()),
                ('kwargs', models.TextField()),
                ('queue', models.CharField(blank=True, max_length=200, null=True)),
                ('exchange', models.CharField(blank=True, max_length=200, null=True)),
                ('routing_key', models.CharField(blank=True, max_length=200, null=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('enabled', models.IntegerField()),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('total_run_count', models.PositiveIntegerField()),
                ('date_changed', models.DateTimeField()),
                ('description', models.TextField()),
                ('one_off', models.IntegerField()),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('priority', models.PositiveIntegerField(blank=True, null=True)),
                ('headers', models.TextField()),
                ('expire_seconds', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_celery_beat_periodictask',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatPeriodictasks',
            fields=[
                ('ident', models.SmallIntegerField(primary_key=True, serialize=False)),
                ('last_update', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_celery_beat_periodictasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryBeatSolarschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(max_length=24)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
            ],
            options={
                'db_table': 'django_celery_beat_solarschedule',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryResultsChordcounter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(max_length=255, unique=True)),
                ('sub_tasks', models.TextField()),
                ('count', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'django_celery_results_chordcounter',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryResultsGroupresult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(max_length=255, unique=True)),
                ('date_created', models.DateTimeField()),
                ('date_done', models.DateTimeField()),
                ('content_type', models.CharField(max_length=128)),
                ('content_encoding', models.CharField(max_length=64)),
                ('result', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'django_celery_results_groupresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoCeleryResultsTaskresult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(max_length=50)),
                ('content_type', models.CharField(max_length=128)),
                ('content_encoding', models.CharField(max_length=64)),
                ('result', models.TextField(blank=True, null=True)),
                ('date_done', models.DateTimeField()),
                ('traceback', models.TextField(blank=True, null=True)),
                ('meta', models.TextField(blank=True, null=True)),
                ('task_args', models.TextField(blank=True, null=True)),
                ('task_kwargs', models.TextField(blank=True, null=True)),
                ('task_name', models.CharField(blank=True, max_length=255, null=True)),
                ('worker', models.CharField(blank=True, max_length=100, null=True)),
                ('date_created', models.DateTimeField()),
                ('periodic_task_name', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'django_celery_results_taskresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Keylabel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('keypoint_text', models.TextField()),
            ],
            options={
                'db_table': 'keylabel',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Keypoint',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('keypoint_text', models.TextField()),
            ],
            options={
                'db_table': 'keypoint',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('nature', models.CharField(blank=True, max_length=100, null=True)),
                ('schedule_date', models.DateField()),
                ('schedule_time', models.TimeField()),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('type', models.CharField(max_length=200)),
                ('channel', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('audio', models.CharField(blank=True, max_length=100, null=True)),
                ('video', models.CharField(blank=True, max_length=100, null=True)),
                ('audio_length', models.CharField(blank=True, max_length=100, null=True)),
                ('is_delete', models.IntegerField()),
                ('meeting_uuid', models.CharField(max_length=32, unique=True)),
                ('platform', models.CharField(max_length=100)),
                ('recurrent', models.IntegerField()),
                ('status', models.CharField(max_length=9)),
                ('duration', models.CharField(blank=True, max_length=100, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('mic_audio', models.CharField(blank=True, max_length=100, null=True)),
                ('speaker_video', models.CharField(blank=True, max_length=100, null=True)),
                ('meeting_platform_id', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'db_table': 'meeting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingAgendaAttachment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'meeting_agenda_attachment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingAnalytics',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('health', models.IntegerField()),
                ('sustainable_index', models.IntegerField()),
                ('participation_engagement', models.IntegerField()),
                ('meeting_id', models.BigIntegerField(unique=True)),
            ],
            options={
                'db_table': 'meeting_analytics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingAttachment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'meeting_attachment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingFeedback',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('feedback', models.IntegerField()),
                ('feedback_comment', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'meeting_feedback',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingMeetingprocessing',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('task_id', models.CharField(max_length=100)),
                ('status', models.CharField(max_length=15)),
                ('reason', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'meeting_meetingprocessing',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingNotes',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'meeting_notes',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingNotification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('notification_id', models.CharField(max_length=500)),
                ('error_message', models.TextField()),
                ('user_id', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'meeting_notification',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingSharingList',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=100)),
                ('permission', models.CharField(max_length=500)),
            ],
            options={
                'db_table': 'meeting_sharing_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingSqstracking',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.TextField()),
            ],
            options={
                'db_table': 'meeting_sqstracking',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 'organization',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationadminJobtitle',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'organizationAdmin_jobtitle',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=9)),
            ],
            options={
                'db_table': 'participant',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RecurringMeeting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'recurring_meeting',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('summary_text', models.TextField()),
                ('summary_audio', models.CharField(blank=True, max_length=250, null=True)),
            ],
            options={
                'db_table': 'summary',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TaskAttachment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'task_attachment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comment', models.TextField()),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'task_comment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TokenBlacklistBlacklistedtoken',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('blacklisted_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'token_blacklist_blacklistedtoken',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TokenBlacklistOutstandingtoken',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.TextField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField()),
                ('jti', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'db_table': 'token_blacklist_outstandingtoken',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Transcript',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('raw_transcript', models.TextField()),
            ],
            options={
                'db_table': 'transcript',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('full_name', models.CharField(max_length=100)),
                ('country_code', models.CharField(max_length=10)),
                ('phone_number', models.CharField(max_length=10)),
                ('time_zone', models.CharField(max_length=100)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('instagram', models.CharField(blank=True, max_length=200, null=True)),
                ('linkedin', models.CharField(blank=True, db_column='linkedIn', max_length=200, null=True)),
                ('twitter', models.CharField(blank=True, max_length=200, null=True)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('is_superuser', models.IntegerField()),
                ('profile_pic', models.CharField(blank=True, max_length=100, null=True)),
                ('role', models.CharField(max_length=100)),
                ('user_audio', models.CharField(max_length=100)),
                ('subscriber_id', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserauthenticationAccesskey',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('access_key', models.CharField(max_length=100, unique=True)),
                ('attempt', models.IntegerField()),
            ],
            options={
                'db_table': 'userAuthentication_accesskey',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserauthenticationUsercalender',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=250)),
                ('calender_id', models.CharField(max_length=100)),
                ('platform', models.CharField(max_length=25)),
            ],
            options={
                'db_table': 'userAuthentication_usercalender',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserauthenticationUserforgotpassword',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('file', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'userAuthentication_userforgotpassword',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserauthenticationUserotp',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user', models.CharField(max_length=255, unique=True)),
                ('otp', models.IntegerField()),
                ('retry', models.IntegerField()),
                ('expiry_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'userAuthentication_userotp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserBreakPoints',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_break_point_text', models.TextField()),
            ],
            options={
                'db_table': 'user_break_points',
                'managed': False,
            },
        ),
    ]
